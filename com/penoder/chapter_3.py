# Chapter-3 Python 运算符

"""
    Python 支持的运算符类型有：
        1、算数运算符
        2、比较（关系）运算符
        3、赋值运算符
        4、逻辑运算符
        5、位运算符
        6、成员运算符
        7、身份运算符
        8、运算符优先级
"""

a, b, c = 2, 3, 5

# 1、Python 算数运算符
print(a + b)  # 加法
print(a - b)  # 减法
print(a * b)  # 乘法
print(5 / 2)  # 除法1：得到的是 float 类型的值 0.4
print(5.0 // 2)  # 除法2：如果是整型之间的除法，得到的是整型，如果是分子分母存在浮点型，则得到的是浮点型，但是值是整型后面小数位只会是 0，非精确值
print(a % c)  # 模除
print(a ** b)  # 乘方

# 2、Python 比较运算符
print(a < b)  # 小于
print(a > b)  # 大于
print(a == b)  # 等于
print(a != b)  # 不等于
print(a <= a)  # 小于等于
print(a >= b)  # 大于等于
# 比较运算符 返回的 数据是 boolean 型

# 3、Python 赋值运算符
d = b  # 创建变量d，将b的值赋给它，所以 d 是 3
print(d)
d += 3  # 表示 d = d + 3；
print(d)
d -= 3  # 表示 d = d - 3
print(d)
d *= 3  # 表示 d = d * 3
print(d)
d /= 3  # 表示 d = d / 3
print(d)
d %= 4  # 表示 d = d % 3
print(d)
d **= 3  # 表示 d = d ** 3
print(d)
d //= 3  # 表示 d = d // 3
print(d)
# 赋值运算符 除了 直接的 = 号 赋值，上面的算术运算符 都可以和 = 号 结合 ，对自身进行算数运算

# Python 位运算符
a, b = 2, 3  # 还是以 2（00000010） 和 3（00000011） 为例，8 位，一个字节
print(a & b)  # 与运算： 得到 00000010 = 2 （与运算的规则是，同一位都是1，则为1，否则为 0）
print(a | b)  # 或运算： 得到 00000011 = 3 （或运算的规则是，同一位有1则为1，否则为0）
print(a ^ b)  # 异或运算： 得到 00000001 = 1 （异或运算的规则是，同一位如果相同，则为0，不同则为1）
print(~a)  # 取反运算： 得到 11111101 = -3 （取反运算的规则是，对二进制数的每一位取反，即1变成0，0变成1）
print(a << 2)  # 左移运算： 得到 00001000 = 8 （左移规则为，二进制上每个数向左移动若干位，位数由 << 右边决定，移动后，高位丢弃，低位补0）
print(a >> 3)  # 右移运算： 得到 00000000 = 0 （右移规则为，二进制上每个数向右移动若干位，位数由 >> 右边决定，移动后，低位丢弃，高位补0）
# 为运算符是将 数字当做 二进制数来计算的

# Python 逻辑运算符
print(0 and 1)  # 有错则错
print(False and 3)
print(1 and 2)  # 全对为对
print(True and False)
print(False or 2)
print(True or 3)
print(not True)
print(not 0)
"""
    and、 or、not 不同于 Java 中的 &&（与）、||（或）、！（非），Java 中的与、或、非、得到的是一个 boolean 类型的值，
    而在 Python 中，
        and： 左边如果是 false，则返回左边的值，否则返回右边的值
        or： 左边如果是 true，则返回左边的值，否则返回右边的值
        not： 将false 和 true 进行取反返回
        
    其实 and 可以理解为 与 操作中的，如果左边失败，则不会进行右边表达式的运算，有错则错
        or 可以理解为 或 操作中的，如果左边已经是对的，则不用关心右边是不是对的，有对则对
        not 则理解成 非 操作的 对错对换咯
"""

# Python 成员运算符


# Python 身份运算符


# Python 运算符优先级
